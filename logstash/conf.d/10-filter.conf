filter {

# Suid logs filtering
    if "squid" in [tags] {
  grok {
    match => {
        "message" => "%{NUMBER:timestamp}\s+%{NUMBER:response_time} %{IPORHOST:src_ip} %{NOTSPACE:squid_request_status}/%{NUMBER:http_status_code} %{NUMBER:transfer_size} %{NOTSPACE:http_method} (%{URIPROTO:url_scheme}://)?(?<url_host>\S+?)(:%{INT:url_port})?(/%{NOTSPACE:url_path})?\s+%{NOTSPACE:client_identity}\s+%{NOTSPACE:peer_code}/%{NOTSPACE:peerhost}\s+%{NOTSPACE:content_type}"
     }
   }
#  prune {
#        remove_field => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]"]
#  }
 }

# Exchange Message Tracking logs filtering
    if "exchange-mtlog" in [tags] {  
  	csv {
            columns => [ 'date-time', 'client-ip', 'client-hostname', 'server-ip', 'server-hostname', 'source-context', 'connector-id', 'source', 'event-id', 'internal-message-id', 'message-id', 'network-message-id', 'recipient-address', 'recipient-status', 'total-bytes', 'recipient-count', 'related-recipient-address', 'reference', 'message-subject', 'sender-address', 'return-path', 'message-info', 'directionality', 'tenant-id', 'original-client-ip', 'original-server-ip', 'custom-data' ]
	    separator => ","
	}	
	
	mutate { 
	split => { "custom-data" => "AccountForest=" }
	add_field => ["AccountForest", "%{[custom-data][1]}"]
	}

 	prune {
        remove_field => ["message","date-time","directionality","input.type","message-info","source","type","custom-data","connector-id","[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[input][type]","[log][offset]","[log][file][path]","[version]" ]
        }

  }

# Exchange system  logs filtering
    if "exchange-winlog" in [tags] {
        prune {
        remove_field => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]","[host][os][kernel]","[host][os][platform]","[host][os][version]"]
#        blacklist_names => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]$
        blacklist_names => ["^.*winlog.*"]

        }
  }

# Winsrv share logs filtering
    if "winsrv" in [tags] and [event][code] == 4634 {
        drop {}
  }
    if "winsrv" in [tags] and [event][code] == 4624 {
        drop {}
  }
    if "winsrv" in [tags] and [event][code] == 4672 {
        drop {}
  }
    if "winsrv" in [tags] and [event][code] == 5059 {
        drop {}
  }
    if "winsrv" in [tags] and [event][code] == 5058 {
        drop {}
  }
    if "winsrv" in [tags] and [event][code] == 5061 {
        drop {}
  }
    if "winsrv" in [tags] {
        prune {
        remove_field => ["[agent][id]","[agent][ephemeral_id]","[agent][id]","[ecs][version]","[ecs][version]","[host][architecture]","[host][id]","[host][os][build]","[host][os][family]","[host][os][kernel]","[host][os][name]","[host][os][platform]","[host][os][version]","[winlog][api]","[winlog][event_data][TransactionId]","[winlog][provider_guid]","[winlog][provider_name]","[winlog][channel]","[winlog][record_id]","[winlog][task]"]
#        blacklist_names => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]","^.*winlog.*"]
#        blacklist_names => ["^.*winlog.*"]

        }
  }

    if "winsrv" in [tags] {
#    if "AccessList" in [winlog][event_data] {
        translate {
          # Source: https://correlog.zendesk.com/entries/83901255-What-Do-NNNN-References-Mean-in-Windows-Agent-Messages-
          dictionary => [ '%%1537', "Delete",
                          '%%1538', "ReadControl",
                          '%%1539', "ReadControl",
                          '%%1540', "ReadControl",
                          '%%1541', "Synchronize",
                          '%%1542', "Synchronize",
                          '%%4416', "ReadData",
                          '%%4417', "WriteData",
                          '%%4418', "AppendData",
                          '%%4419', "ReadEA",
                          '%%4420', "WriteEA",
                          '%%4423', "ReadAttrib",
                          '%%4424', "WriteAttrib",
                          '%%1801', "Granted",
                          '%%1805', "NotGranted" ]
          field => "[winlog][event_data][AccessList]"
          destination => "[event_data][Accesses]"
#          destination => "[winlog][event_data][AccessList]"
#          add_tag => ['accesses_translate']
          exact => false
        }
    
        mutate {
           split => { "[event_data][Accesses]" => " " }
#           split => { "[winlog][event_data][AccessList]" => " " }
        }
      }


# Domain Controllers logs filtering

    if "windc" in [tags] and [event][code] == 4776 and [winlog][event_data][Status] == "0x0" {
        drop {}

  }

    if "windc" in [tags] and [event][code] == 4776 {
        prune {
        remove_field => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]","[host][os][kernel]","[host][os][platform]","[host][os][version]"]
#        blacklist_names => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]","^.*winlog.*"]
        blacklist_names => ["^.*winlog.*"]

        }
  }

# Domain Controllers logon events

    if "windc" in [tags] and [event][code] == 4624 and [winlog][event_data][TargetUserName] == "adm_starodubcev" or [winlog][event_data][TargetUserName] == "1c_edit"  {
        drop {}

  }

    


    if "windc" in [tags] and [event][code] == 4624 {
        prune {
        remove_field => ["[agent][id]","[agent][ephemeral_id]","[agent][hostname]","[agent][type]","[agent][version]","[ecs][version]","[event][kind]","[host][architecture]","[host][hostname]","[host][os][build]","[host][os][family]","[host][os][kernel]","[host][os][platform]","[host][os][version]","[event][code]","[event][action]","[host][id]","[host][name]","[host][os][name]","[log][level]"]
        blacklist_names => ["message"]
        }
  }



}

# RD Gateway (DPC-RDS) events


